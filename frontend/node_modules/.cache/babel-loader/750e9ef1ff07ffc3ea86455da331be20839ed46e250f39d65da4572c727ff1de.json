{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NITYAM TRIPATHI\\\\OneDrive\\\\Desktop\\\\Voting app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { contractAbi, contractAddress } from \"./Constant/constant\";\nimport Login from \"./Components/Login\";\nimport Connect from \"./Components/Connect\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [votingStatus, setVotingStatus] = useState(true);\n  const [remainingTime, setremainingTime] = useState(\"\");\n  const [candidates, setCandidates] = useState([]);\n  const [number, setNumber] = useState(\"\");\n  const [CanVote, setCanVote] = useState(true);\n  useEffect(() => {\n    getCandidates();\n    getCurrentStatus();\n    getRemainingTime();\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      }\n    };\n  });\n  async function vote() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const tx = await contractInstance.vote(number);\n    await tx.wait();\n    canVote();\n  }\n  async function getCandidates() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    await provider.send(\"eth_requestAccounts\", []);\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const candidatesList = await contractInstance.getAllVotesOfCandiates();\n    console.log(candidatesList);\n    const formattedList = candidatesList.map((candidate, index) => {\n      return {\n        index: index,\n        candidate: candidate.name,\n        voteCount: candidate.voteCount.toNumber()\n      };\n    });\n    setCandidates(formattedList);\n  }\n  async function canVote() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const voteStatus = await contractInstance.voters(await signer.getAddress());\n    setCanVote(voteStatus);\n  }\n  async function getCurrentStatus() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    await provider.send(\"eth_requestAccounts\", []);\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const status = await contractInstance.getVotingStatus();\n    console.log(status);\n    setVotingStatus(status);\n  }\n  async function getRemainingTime() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    await provider.send(\"eth_requestAccounts\", []);\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const time = await contractInstance.getRemainingTime();\n    setremainingTime(parseInt(time, 16));\n  }\n  function handleAccountsChanged(accounts) {\n    if (accounts.length > 0 && account !== accounts[0]) {\n      setAccount(accounts[0]);\n      canVote();\n    } else {\n      setIsConnected(false);\n      setAccount(null);\n    }\n  }\n  async function connectToMetamask() {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(provider);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n        setAccount(address);\n        console.log(\"Metamask Connected:\" + address);\n        setIsConnected(true);\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      console.log(\"Please Install Metamask\");\n    }\n  }\n  async function handleNumberChange(e) {\n    setNumber(e.target.value);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: isConnected ? /*#__PURE__*/_jsxDEV(Connect, {\n      account: account,\n      candidates: candidates,\n      remainingTime: remainingTime,\n      number: number,\n      handleNumberChange: handleNumberChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {\n      connectWallet: connectToMetamask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 70\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"j23ZJZp79O2f1yctP/e8Mt1OJxk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","ethers","contractAbi","contractAddress","Login","Connect","jsxDEV","_jsxDEV","App","_s","provider","setProvider","account","setAccount","isConnected","setIsConnected","votingStatus","setVotingStatus","remainingTime","setremainingTime","candidates","setCandidates","number","setNumber","CanVote","setCanVote","getCandidates","getCurrentStatus","getRemainingTime","window","ethereum","on","handleAccountsChanged","removeListener","vote","providers","Web3Provider","send","signer","getSigner","contractInstance","Contract","tx","wait","canVote","candidatesList","getAllVotesOfCandiates","console","log","formattedList","map","candidate","index","name","voteCount","toNumber","voteStatus","voters","getAddress","status","getVotingStatus","time","parseInt","accounts","length","connectToMetamask","address","error","handleNumberChange","e","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","connectWallet","_c","$RefreshReg$"],"sources":["C:/Users/NITYAM TRIPATHI/OneDrive/Desktop/Voting app/frontend/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { contractAbi, contractAddress } from \"./Constant/constant\";\nimport Login from \"./Components/Login\";\nimport Connect from \"./Components/Connect\";\n\nimport \"./App.css\";\nfunction App() {\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [votingStatus, setVotingStatus] = useState(true);\n  const [remainingTime, setremainingTime] = useState(\"\");\n  const [candidates, setCandidates] = useState([]);\n  const [number, setNumber] = useState(\"\");\n  const [CanVote, setCanVote] = useState(true);\n\n  useEffect( () => {\n    getCandidates();\n    getCurrentStatus();\n    getRemainingTime();\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n    }\n\n    return() => {\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      }\n    }\n  });\n\n  async function vote() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract (\n      contractAddress, contractAbi, signer\n    );\n\n    const tx = await contractInstance.vote(number);\n    await tx.wait();\n    canVote();\n}\n\n  async function getCandidates(){\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    await provider.send(\"eth_requestAccounts\",[]);\n    const contractInstance = new ethers.Contract(contractAddress,contractAbi,signer);\n    const candidatesList = await contractInstance.getAllVotesOfCandiates();\n    console.log(candidatesList);\n    const formattedList = candidatesList.map((candidate,index)=>{\n      return {\n        index: index,\n        candidate: candidate.name,\n        voteCount: candidate.voteCount.toNumber()\n      }\n    });\n    setCandidates(formattedList);\n  }\n\n  async function canVote() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract (\n      contractAddress, contractAbi, signer\n    );\n    const voteStatus = await contractInstance.voters(await signer.getAddress());\n    setCanVote(voteStatus);\n\n}\n\n  async function getCurrentStatus(){\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    await provider.send(\"eth_requestAccounts\",[]);\n    const contractInstance = new ethers.Contract(contractAddress,contractAbi,signer);\n    const status = await contractInstance.getVotingStatus();\n    console.log(status);\n    setVotingStatus(status);\n  }\n\n  async function getRemainingTime(){\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    await provider.send(\"eth_requestAccounts\",[]);\n    const contractInstance = new ethers.Contract(contractAddress,contractAbi,signer);\n    const time = await contractInstance.getRemainingTime();\n    setremainingTime(parseInt(time,16));\n  }\n\n  function handleAccountsChanged(accounts){\n    if(accounts.length > 0 && account!==accounts[0]){\n      setAccount(accounts[0]);\n      canVote();\n    }\n    else{\n      setIsConnected(false);\n      setAccount(null);\n    }\n  }\n\n  async function connectToMetamask() {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(provider);\n        await provider.send(\"eth_requestAccounts\",[]);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n        setAccount(address);\n        console.log(\"Metamask Connected:\"+address);\n        setIsConnected(true);\n      } catch (error) {\n        console.log(error)\n      }\n    }else{\n      console.log(\"Please Install Metamask\")\n    }\n  }\n\n  async function handleNumberChange(e) {\n    setNumber(e.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      {\n        isConnected ? (<Connect \n                      account={account} \n                      candidates={candidates} \n                      remainingTime={remainingTime}\n                      number={number}\n                      handleNumberChange={handleNumberChange} />) : (<Login connectWallet={connectToMetamask}/>)\n      }\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}